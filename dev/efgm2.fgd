//-------------------------------------------------------------------------
//
// Game data for Escape From Garry's Mod Rewrite
//
//-------------------------------------------------------------------------

@include "base.fgd"
@include "halflife2.fgd"

@PointClass base(Targetname) = efgm_raid_interface : "Raid System Interface"
[
    
    // Key Values
    raid_time(integer) : "Raid Time" : 1500 : "The time the raid lasts, in seconds."

    //Inputs
    input StartRaid(void) : "Tells the raid system to begin the fucking raid already. Can be triggered by whatever, get creative."

    input EndRaid(void) : "Tells the raid system to end the raid. Instantly. Maybe use this for like a map with a nuke or something. Again, get creative."

    input SetRaidTime(integer) : "Does exactly what you think it does. Useful for adding pressure to extract. Do I really have to say it?"
    
    input RaidAddPlayer(void) : "Tells the raid system to add a player into an ongoing raid. Smart spawnz."

    // Outputs
    output OnRaidStart(void) : "This fires when the raid starts. Useful for spawning shit in the map, enabling / disabling extracts, or doing other things."

    output OnRaidEnd(void) : "Fires when the raid ends. Useful for resetting the map, or doing similar types of utmost trollage."

]

@PointClass base(Targetname) = efgm_event_interface : "Event System Interface"
[
    
    //Inputs
    input StartEvent(string) : "Starts an event, with the string being the event's name. This fires OnEventStart btw."

    // Outputs
    output OnEventStart(string) : "Fires when an event starts, with the string being the name of the event. Useful for making stuff happen in the map."

]

@PointClass base(Targetname, PlayerClass, Angles) studio("models/editor/playerstart.mdl") = efgm_raid_spawn : "Player Spawn"
[

    // Key Values

    spawn_type(choices) : "Spawn Type" : 0 : "Type of player that can spawn here. PMC spawns a PMC just whenever, Player Scav spawns player scavs whenever I add them, and Any spawns both." =
    [
        0 : "Any"
        1 : "PMC"
        2 : "Player Scav"
    ]

    spawn_group(string) : "Spawn Group" : "" :
    "Spawn groups are used in conjunction with extracts to give each player different extraction points depending on their spawn location."+
    "For instance, a player spawning at a raid spawn with the group 'west' can only extract at extracts with the group 'west'."+
    "Leave blank to make the player spawned here be able to extract anywhere."

]

@PointClass base(Targetname, PlayerClass, Angles) studio("models/editor/playerstart.mdl") = efgm_lobby_spawn : "Lobby Spawn"
[
    // basically just a glorified info_target lol
]


@PointClass base(Targetname) = efgm_extract : "Extract"
[

    extractTime(integer)       : "Extract Time"             : 7                                     : "How long it takes to finish extracting once you've started extracting."

    extractName(string)        : "Extract Name"             : ""                                    : "Used by players to find extract locations. Make the name appropriate; name the extract according to what a player would look for in order to find it. (e.g. Power Station Gate, Road to Bunker, Southwestern Checkpoint, Gooey Helipad, etc.)"

    disabledMessage(string)    : "Disabled Message"         : "This extract is currently disabled!" : "This is the message displayed to anyone attempting to extract if the extract is disabled. If the extract is enabled by an event, listing that event here would be a good idea. You can leave this blank if the extract is guranteed."

    extractGroup(string)       : "Extract Group"            : ""                                    : "Group of spawns which can use this extract. See efgm_raid_spawn for more details. Leave blank if anybody can use it."

    accessibility(choices)      : "Extract Accessibility"   : 0                                     : "Availability of this extract to types of players. Also, it's called segregation internally because accessibility sounds too similar to availability, which is already an option. Sorry America!" =
    [
        0 : "Any"
        1 : "PMC"
        2 : "Scav"
    ]

    // Outputs
    output    OnPlayerExtract(void)     :   "Fires when a player extracts."

    output    OnExtractEnabled(void)    :   "Fires when the extract gets enabled."

    output    OnExtractDisabled(void)   :   "Fires when the extract gets disabled."

    // Inputs
    input EnableExtract(void)           :   "Enables the extract."

    input DisableExtract(void)          :   "Disables the extract."

    input ToggleExtract(void)           :   "Does exactly what it sounds like."


    input StartExtractingPlayer(void)   :   "As this is not a trigger no more, this input will signal for a given player to begin extracting."

    input StopExtractingPlayer(void)    :   "Stops a player from extracting."


    input ChangeDisabledMessage(string) :   "Changes the disabled message. Good for extracts with multiple prerequisites ig. Maybe with like a train, it could be changed from 'route power to track' to 'wait for train'."
    
    spawnflags(flags) =
    [
        // <flag value 2^i> : "Checkbox Display Text" : <0 for false on default, 1 for true>

        1 : "Start Disabled"            : 0
        2 : "Is Extract Guranteed"      : 1
        4 : "Instant Extract"           : 0
    ]

]

@PointClass base(Targetname, Angles, Origin) studio("models/efgm/low_crate02.mdl") = efgm_loot : "Spawns a customizable loot object."
[
    spawn_chance(integer) : "Weapon Spawn Chance": 5 : "The chance this spawn will create loot. 5 is always, 0 is never."

    loot_type(choices) : "Loot Type" : 0 : "The type of loot this spawn should make" =
    [
        0 : "Any"
        1 : "Weapons"
        2 : "Utility"
        3 : "Armor"
        4 : "Special"
    ]

    loot_tier(choices) : "Loot Tier" : 0 : "The tier of crate spawned from this" =
    [
        0 : "Any"
        1 : "Low"
        2 : "Medium"
        3 : "High"
    ]

    // Inputs
    input SpawnLoot(void) : "Spawns loot, regardless of whether loot has already been spawned."

    // Outputs
    output OnSpawn(void) : "Fires when the loot spawns"
    output OnOpen(void) : "Fires for crates when the loot spawns from the crate. Have fun."

    spawnflags(flags) =
    [
        1 : "Spawn on Start" : 0
        2 : "Loot in Crate" : 1
    ]
]